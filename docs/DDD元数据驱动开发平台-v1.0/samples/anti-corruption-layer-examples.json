{
  "examples": [
    {
      "name": "遗留系统集成防腐层",
      "description": "与遗留ERP系统的集成防腐层（Anti-Corruption Layer）",
      "antiCorruptionLayer": {
        "id": "acl_legacy_erp",
        "name": "遗留ERP系统防腐层",
        "programmingName": "LegacyErpAntiCorruptionLayer",
        "description": "用于隔离遗留ERP系统，防止其数据模型污染当前领域模型（Anti-Corruption Layer）",
        "externalSystemId": "sys_legacy_erp",
        "externalSystemName": "Legacy ERP System",
        "externalSystemType": "LEGACY",
        "translationLayer": {
          "inputTranslator": "LegacyErpInputTranslator",
          "outputTranslator": "LegacyErpOutputTranslator",
          "dataMapper": "LegacyErpDataMapper"
        },
        "adapters": [
          {
            "id": "adapter_erp_order",
            "name": "ERP订单适配器",
            "description": "将ERP订单数据转换为领域订单对象",
            "adapterType": "INPUT",
            "sourceFormat": "ERP_ORDER_FORMAT",
            "targetFormat": "DOMAIN_ORDER_FORMAT",
            "transformationRules": [
              "mapErpOrderIdToOrderId",
              "convertErpDateToIsoDate",
              "transformErpStatusToDomainStatus"
            ],
            "isActive": true
          },
          {
            "id": "adapter_domain_order",
            "name": "领域订单适配器",
            "description": "将领域订单对象转换为ERP订单数据",
            "adapterType": "OUTPUT",
            "sourceFormat": "DOMAIN_ORDER_FORMAT",
            "targetFormat": "ERP_ORDER_FORMAT",
            "transformationRules": [
              "mapOrderIdToErpOrderId",
              "convertIsoDateToErpDate",
              "transformDomainStatusToErpStatus"
            ],
            "isActive": true
          }
        ],
        "facades": [
          {
            "id": "facade_order_service",
            "name": "订单服务外观",
            "description": "提供统一的订单服务接口",
            "facadeType": "SERVICE",
            "methods": [
              {
                "id": "method_get_order",
                "name": "获取订单",
                "description": "从ERP系统获取订单信息",
                "visibility": "PUBLIC",
                "parameters": [
                  {
                    "id": "param_order_id",
                    "name": "订单ID",
                    "description": "ERP订单ID",
                    "dataType": "string",
                    "isRequired": true
                  }
                ],
                "returnType": {
                  "type": "DTO",
                  "dtoId": "dto_order"
                }
              }
            ],
            "isActive": true
          }
        ],
        "isolationLevel": "HIGH",
        "isActive": true,
        "usageStatus": {
          "isReferencedByStrategic": true,
          "isReferencedByTactical": true,
          "isReferencedByImplementation": true,
          "isReferencedByScreen": false,
          "referencedBy": [
            {
              "schemaType": "STRATEGIC",
              "elementId": "bc_order_management",
              "elementName": "订单管理限界上下文"
            },
            {
              "schemaType": "TACTICAL",
              "elementId": "agg_order",
              "elementName": "订单聚合"
            }
          ]
        }
      }
    },
    {
      "name": "第三方支付系统防腐层",
      "description": "与第三方支付系统的集成防腐层（Anti-Corruption Layer）",
      "antiCorruptionLayer": {
        "id": "acl_payment_gateway",
        "name": "第三方支付系统防腐层",
        "programmingName": "PaymentGatewayAntiCorruptionLayer",
        "description": "隔离第三方支付系统，提供统一的支付接口（Anti-Corruption Layer）",
        "externalSystemId": "sys_payment_gateway",
        "externalSystemName": "Third Party Payment Gateway",
        "externalSystemType": "THIRD_PARTY",
        "translationLayer": {
          "inputTranslator": "PaymentInputTranslator",
          "outputTranslator": "PaymentOutputTranslator",
          "dataMapper": "PaymentDataMapper"
        },
        "adapters": [
          {
            "id": "adapter_payment_request",
            "name": "支付请求适配器",
            "description": "将领域支付请求转换为第三方支付格式",
            "adapterType": "OUTPUT",
            "sourceFormat": "DOMAIN_PAYMENT_REQUEST",
            "targetFormat": "GATEWAY_PAYMENT_REQUEST",
            "transformationRules": [
              "mapPaymentAmount",
              "transformCurrencyCode",
              "addGatewayRequiredFields"
            ],
            "isActive": true
          },
          {
            "id": "adapter_payment_response",
            "name": "支付响应适配器",
            "description": "将第三方支付响应转换为领域支付结果",
            "adapterType": "INPUT",
            "sourceFormat": "GATEWAY_PAYMENT_RESPONSE",
            "targetFormat": "DOMAIN_PAYMENT_RESULT",
            "transformationRules": [
              "mapGatewayStatusToDomainStatus",
              "extractTransactionId",
              "handleErrorCodes"
            ],
            "isActive": true
          }
        ],
        "facades": [
          {
            "id": "facade_payment_service",
            "name": "支付服务外观",
            "description": "提供统一的支付服务接口",
            "facadeType": "SERVICE",
            "methods": [
              {
                "id": "method_process_payment",
                "name": "处理支付",
                "description": "处理支付请求",
                "visibility": "PUBLIC",
                "parameters": [
                  {
                    "id": "param_payment_request",
                    "name": "支付请求",
                    "description": "支付请求DTO",
                    "dataType": "PaymentRequestDTO",
                    "isRequired": true
                  }
                ],
                "returnType": {
                  "type": "DTO",
                  "dtoId": "dto_payment_result"
                }
              }
            ],
            "isActive": true
          }
        ],
        "isolationLevel": "COMPLETE",
        "isActive": true,
        "usageStatus": {
          "isReferencedByStrategic": true,
          "isReferencedByTactical": true,
          "isReferencedByImplementation": true,
          "isReferencedByScreen": false,
          "referencedBy": [
            {
              "schemaType": "STRATEGIC",
              "elementId": "bc_payment",
              "elementName": "支付限界上下文"
            },
            {
              "schemaType": "TACTICAL",
              "elementId": "agg_payment",
              "elementName": "支付聚合"
            }
          ]
        }
      }
    }
  ],
  "repositoryFactoryRelationships": [
    {
      "name": "订单仓储与工厂关系",
      "description": "订单仓储使用工厂来重建复杂的订单对象",
      "repository": {
        "id": "repo_order",
        "name": "订单仓储",
        "programmingName": "OrderRepository",
        "description": "订单数据持久化管理",
        "aggregateId": "agg_order",
        "interfaceName": "OrderRepository",
        "implementationName": "OrderRepositoryImpl",
        "factoryId": "factory_order",
        "persistenceStrategy": "JPA",
        "queryOptimization": "INDEX",
        "isActive": true,
        "usageStatus": {
          "isReferencedByStrategic": true,
          "isReferencedByTactical": true,
          "isReferencedByImplementation": true,
          "isReferencedByScreen": false,
          "referencedBy": [
            {
              "schemaType": "TACTICAL",
              "elementId": "agg_order",
              "elementName": "订单聚合"
            }
          ]
        }
      },
      "factory": {
        "id": "factory_order",
        "name": "订单工厂",
        "programmingName": "OrderFactory",
        "description": "负责创建和重建订单对象",
        "aggregateId": "agg_order",
        "targetEntityId": "entity_order",
        "factoryType": "COMPLEX",
        "creationStrategy": "BUILDER",
        "isActive": true,
        "usageStatus": {
          "isReferencedByStrategic": true,
          "isReferencedByTactical": true,
          "isReferencedByImplementation": true,
          "isReferencedByScreen": false,
          "referencedBy": [
            {
              "schemaType": "TACTICAL",
              "elementId": "repo_order",
              "elementName": "订单仓储"
            }
          ]
        }
      },
      "relationship": {
        "type": "DEPENDENCY",
        "description": "仓储依赖工厂来重建复杂对象",
        "responsibilities": [
          "仓储负责数据持久化",
          "工厂负责对象创建和重建",
          "仓储在需要重建复杂对象时调用工厂"
        ]
      }
    },
    {
      "name": "用户仓储与工厂关系",
      "description": "用户仓储使用工厂来创建不同类型的用户对象",
      "repository": {
        "id": "repo_user",
        "name": "用户仓储",
        "programmingName": "UserRepository",
        "description": "用户数据持久化管理",
        "aggregateId": "agg_user",
        "interfaceName": "UserRepository",
        "implementationName": "UserRepositoryImpl",
        "factoryId": "factory_user",
        "persistenceStrategy": "JPA",
        "queryOptimization": "CACHE",
        "isActive": true,
        "usageStatus": {
          "isReferencedByStrategic": true,
          "isReferencedByTactical": true,
          "isReferencedByImplementation": true,
          "isReferencedByScreen": false,
          "referencedBy": [
            {
              "schemaType": "TACTICAL",
              "elementId": "agg_user",
              "elementName": "用户聚合"
            }
          ]
        }
      },
      "factory": {
        "id": "factory_user",
        "name": "用户工厂",
        "programmingName": "UserFactory",
        "description": "负责创建不同类型的用户对象",
        "aggregateId": "agg_user",
        "targetEntityId": "entity_user",
        "factoryType": "SPECIALIZED",
        "creationStrategy": "BUILDER",
        "isActive": true,
        "usageStatus": {
          "isReferencedByStrategic": true,
          "isReferencedByTactical": true,
          "isReferencedByImplementation": true,
          "isReferencedByScreen": false,
          "referencedBy": [
            {
              "schemaType": "TACTICAL",
              "elementId": "repo_user",
              "elementName": "用户仓储"
            }
          ]
        }
      },
      "relationship": {
        "type": "COLLABORATION",
        "description": "仓储和工厂协作完成用户对象的持久化和重建",
        "responsibilities": [
          "仓储负责数据存储和检索",
          "工厂负责根据用户类型创建相应的用户对象",
          "仓储在重建用户对象时使用工厂的专门方法"
        ]
      }
    }
  ],
  "usageScenarios": [
    {
      "scenario": "遗留系统集成",
      "description": "与现有遗留系统集成时的防腐层使用（Anti-Corruption Layer）",
      "examples": [
        {
          "system": "Legacy ERP System",
          "purpose": "防止ERP系统的数据模型污染当前领域模型",
          "isolationLevel": "HIGH",
          "keyComponents": ["输入转换器", "输出转换器", "数据映射器", "适配器", "外观"]
        }
      ]
    },
    {
      "scenario": "第三方服务集成",
      "description": "与第三方服务集成时的防腐层使用（Anti-Corruption Layer）",
      "examples": [
        {
          "system": "Payment Gateway",
          "purpose": "隔离第三方支付系统，提供统一的支付接口",
          "isolationLevel": "COMPLETE",
          "keyComponents": ["支付请求适配器", "支付响应适配器", "支付服务外观"]
        }
      ]
    },
    {
      "scenario": "仓储工厂协作",
      "description": "仓储和工厂的协作模式",
      "examples": [
        {
          "pattern": "复杂对象重建",
          "description": "仓储使用工厂来重建复杂的聚合对象",
          "responsibility": "仓储负责数据，工厂负责对象创建"
        },
        {
          "pattern": "类型化对象创建",
          "description": "工厂根据不同类型创建相应的对象",
          "responsibility": "工厂提供专门的创建方法，仓储调用工厂"
        }
      ]
    }
  ],
  "codeGenerationExamples": {
    "java": {
      "antiCorruptionLayer": "public class LegacyErpAntiCorruptionLayer { ... }",
      "adapter": "public class ErpOrderAdapter implements InputAdapter { ... }",
      "facade": "public class OrderServiceFacade { public OrderDTO getOrder(String id) { ... } }",
      "repository": "public interface OrderRepository extends JpaRepository<Order, Long> { ... }",
      "factory": "public class OrderFactory { public Order createOrder(OrderData data) { ... } }"
    },
    "typescript": {
      "antiCorruptionLayer": "class LegacyErpAntiCorruptionLayer { ... }",
      "adapter": "class ErpOrderAdapter implements InputAdapter { ... }",
      "facade": "class OrderServiceFacade { getOrder(id: string): OrderDTO { ... } }",
      "repository": "interface OrderRepository { findById(id: string): Promise<Order>; }",
      "factory": "class OrderFactory { createOrder(data: OrderData): Order { ... } }"
    }
  }
}
